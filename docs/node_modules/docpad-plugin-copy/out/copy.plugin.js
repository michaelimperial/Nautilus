// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var Copy;
    return Copy = (function(_super) {

      __extends(Copy, _super);

      function Copy() {
        return Copy.__super__.constructor.apply(this, arguments);
      }

      Copy.prototype.name = 'copy';

      Copy.prototype.writeAfter = function(opts, next) {
        var TaskGroup, config, docpad, docpadConfig, eachr, outPath, pathUtil, srcPath, tasks;
        eachr = require('eachr');
        pathUtil = require('path');
        docpad = this.docpad;
        config = this.getConfig();
        docpadConfig = this.docpad.getConfig();
        outPath = pathUtil.normalize(docpadConfig.outPath);
        srcPath = pathUtil.normalize(docpadConfig.srcPath);
        if (Object.keys(config).length === 0) {
          config["default"] = {};
          config["default"].src = 'raw';
        }
        TaskGroup = require('taskgroup').TaskGroup;
        tasks = new TaskGroup({
          concurrency: 1
        }).done(function(err, results) {
          if (!(err != null)) {
            docpad.log('info', 'Copying completed successfully');
          } else {
            docpad.log('error', 'Copying error ' + err);
          }
          return typeof next === "function" ? next() : void 0;
        });
        eachr(config, function(target, key) {
          return tasks.addTask(function(complete) {
            var CYGWIN, OSX, WINDOWS, XCOPY, command, options, out, safeps, src;
            src = pathUtil.join(srcPath, target.src);
            out = outPath;
            if (target.out != null) {
              out = pathUtil.join(outPath, target.out);
            }
            options = (target.options != null) && typeof target.options === 'object' ? target.options : {};
            docpad.log("info", "Copying " + key + " out: " + out + ", src: " + src);
            WINDOWS = /win32/.test(process.platform);
            OSX = /darwin/.test(process.platform);
            CYGWIN = /cygwin/.test(process.env.PATH);
            XCOPY = WINDOWS && !CYGWIN;
            command = (XCOPY ? ['xcopy', '/eDy', src + '\\*', out + '\\'] : OSX ? ['rsync', '-a', src + '/', out + '/'] : ['cp', '-Ruf', src + '/.', out]);
            safeps = require('safeps');
            return safeps.spawn(command, {
              output: false
            }, function(err) {
              if (err) {
                return complete(err);
              }
              docpad.log('debug', "Done copying " + key);
              return complete();
            });
          });
        });
        return tasks.run();
      };

      return Copy;

    })(BasePlugin);
  };

}).call(this);
